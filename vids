#!/usr/bin/env sh
VERSION=0.3.1
VIDS_MENU="${VIDS_DEFAULT_MENU:-}"                # Default Menu
VIDS_PLTFRM="${VIDS_DEFAULT_PLATFORM:-youtube}"   # Default Platform
VIDS_PLAYER="${VIDS_DEFAULT_PLAYER:-mpv}"         # Default Player
VIDS_PLAYER_ARGS="${VIDS_DEFAULT_PLAYER_ARGS:- }" # Default Player Arguments
VIDS_ONE_SHOT="${VIDS_ONE_SHOT:-false}"
VIDS_SHOW_NSFW="${VIDS_SHOW_NSFW:-false}"         # Include NSFW video
VIDS_YOUTUBE_PIPED=${VIDS_YOUTUBE_PIPED:-false}   # Use youtube alternative front-end Piped
VIDS_PIPEDAPI_URL="${VIDS_PIPEDAPI_URL:-https://pipedapi.kavin.rocks}" # https://github.com/TeamPiped/Piped/wiki/Instances
VIDS_PEERTUBE_URL="${VIDS_PEERTUBE_URL:-https://sepiasearch.org}"      # https://instances.joinpeertube.org/

# check if app installed ; ignores aliases
has() {
    case "$(command -v "$1" 2>/dev/null)" in
        alias*|"") return 1
    esac
}

_phi() {
    >&2 printf '    %s\n' "$1"
}

_pht() {
    >&2 printf '%s\n' "$@"
}

# print error message & exit
_pemx() {
    _pht "Usage:   ${0##*/} [OPTIONS] query"
    _pht
    >&2 printf '\033[31;1merror :\033[m %s\n' "$1" && exit 1
}

if [ -n "${VIDS_MENU}" ] && has "${VIDS_MENU}" ; then
    VIDS_MENU="${VIDS_MENU}"
elif has 'rofi' ; then
    VIDS_MENU="rofi"
elif has 'dmenu'; then
    VIDS_MENU="dmenu"
elif has 'fzf'; then
    VIDS_MENU="fzf"
fi

_input(){
    case "$VIDS_MENU" in
        "dmenu") printf '' | dmenu -p "Search ${VIDSBRND} Videos:" ;;
        "rofi")  printf '' | rofi -dmenu -p "Search ${VIDSBRND} Videos" -l 0 ;;
        "fzf"|"print"|"print-json"|"print-link") read -r query && echo "${query}" ;;
    esac
}

_choose(){
    case "$VIDS_MENU" in
        "print")
                printf '%s' "${vids_listvdata}"
                exit 0
                ;;
        "print-json")
                printf '%s' "${vids_jsonvdata}"
                exit 0
                ;;
        "print-link")
                printf '%s' "${vids_jsonvdata}" | jq -r '.[]|.videoURL'
                exit 0
                ;;
        "dmenu")
                video_url=$(printf '%s' "${vids_listvdata}" |\
                            dmenu -i -p 'Select Video:' -l 20 |\
                            awk '{print $NF}'\
                            )
                ;;
        "rofi")
                video_url=$(printf '%s' "${vids_listvdata}" |\
                            rofi -dmenu -i -p 'Select Videos' -width 90 -l 20 -multi-select -no-click-to-exit -mesg "${VIDSBRND} - Search query: ${query}" |\
                            awk '{print $NF}'\
                            )
                ;;
        "fzf")
                video_url=$(printf '%s' "${vids_listvdata}" |\
                            fzf -i -e --with-nth='1..-2' --multi --cycle --bind=ctrl-t:toggle-all --header='Select Videos:' --reverse\
                                --bind "ctrl-c:execute-silent(awk '{print \$NF}' {+f} | xclip -selection clipboard && notify-send 'copyed!!')" |\
                            awk '{print $NF}'\
                            )
                ;;
    esac
}

version(){
    _pht "${0##*/} $VERSION"
}

usage() {
    _pht "Usage:   ${0##*/} [OPTIONS] query"
    _pht
    _pht "Options:"
    _pht "  General Options:"
    _phi "-h, --help                Print this help text and exit."
    _phi "-v, --version             Print program version and exit."
    _pht
    _pht "  Search:"
    _phi "-p, --platform            "
    _phi "    ytrending             Youtbe Trending"
    _phi "    youtube               Youtbe"
    _phi "    peertube              PeerTube"
    _phi "    bitchute              BitChute"
    _phi "    lbry                  LBRY"
    _phi "    tedtalk               TED Talks"
    _pht
    _phi "-ytr, --ytrending         An alias for -p ytrending"
    _phi "-yt, --youtube            An alias for -p youtube"
    _phi "-pt, --peertube           An alias for -p peertube"
    _phi "-bc, --bitchute           An alias for -p bitchute"
    _phi "-ted, --tedtalk           An alias for -p tedtalk"
    _phi "-lb, --lbry, --odysee     An alias for -p lbry"
    _pht
    _phi "--piped                   Use Piped; a privacy-friendly YouTube frontend."
    _phi "--no-piped                Do not use Piped."
    _pht
    _phi "--nsfw                    Include nsfw videos. (WIP)"
    _phi "--no-nsfw                 Do not include nsfw videos. (WIP)"
    _pht
    _pht "  Menu Options:"
    _phi "-m, --menu MENU          "
    _phi "    fzf                  supports multi-select with tab/shift-tab."
    _phi "    dmenu                doesn't supports multi-select."
    _phi "    rofi                 supports multi-select with shift-enter."
    _pht
    _phi "--fzf                    An alias for --menu fzf"
    _phi "--dmenu                  An alias for --menu dmenu"
    _phi "--rofi                   An alias for --menu rofi"
    _pht
    _pht "  Player Options:"
    _phi "-P, --player COMMAND     Player to feed urls to."
    _phi "-a, --player-args ARGS   Customize the arguments which are put together with the value of --player to create a command to execute."
    _phi "-e, --exit               don't prompt selector again after the player close"
    _pht
    _pht "  Scripting Options:"
    _phi "--print-json             print results json to stdout and exit."
    _phi "--print-link             print results links to stdout and exit."
    _phi "--print                  print results to stdout and exit."
    _pht
    _pht "  Environment variables:"
    _phi "VIDS_DEFAULT_MENU        Default menu to use. (default: rofi -> dmenu -> fzf)"
    _phi "VIDS_DEFAULT_PLATFORM    Default platform to use. (default: youtube)"
    _phi "VIDS_DEFAULT_PLAYER      Default video player to use. (default: mpv)"
    _phi "VIDS_DEFAULT_PLAYER_ARGS Default arguments which are passed to the player. (default: empty)"
    _phi "VIDS_SHOW_NSFW           Always include NSFW videos (default: false)"
    _phi "VIDS_YOUTUBE_PIPED       Use Piped; the privacy-friendly YouTube frontend. (default: false )"
    _phi "VIDS_PIPEDAPI_URL        Piped Instance API URL. (default: https://pipedapi.kavin.rocks )"
    _phi "VIDS_PEERTUBE_URL        PeerTube Instance URL. (default: https://sepiasearch.org )"
    _pht
    _pht "  Improve me on GitHub:"
    _phi "https://github.com/MyOS-ArchLinux/vids"
}

while [ "$1" ]; do
    case "$1" in
        "-h"|"--help")
            usage
            exit 0
            ;;
        "-v"|"--version")
            version
            exit 0
            ;;

        "-p"|"--platform")
            if [ $# -lt 2 ]; then
                _pemx "$1 option requires 1 argument"
            fi
            case "$2" in
                "ytrending"|"youtube"|"peertube"|"bitchute"|"tedtalk"|"lbry") VIDS_PLTFRM="$2"; shift 2 ;;
                *) _pemx "'$2' platform is not supported yet! if you wanted us to add it, open an issues on our github: https://github.com/MyOS-ArchLinux/vids" ;;
            esac
            ;;
        "-ytr"|"--ytr"|"--ytrending")
            VIDS_PLTFRM="ytrending" ; shift ;;
        "-yt"|"--yt"|"--youtube")
            VIDS_PLTFRM="youtube"   ; shift ;;
        "-pt"|"--pt"|"--peertube")
            VIDS_PLTFRM="peertube"  ; shift ;;
        "-bc"|"--bc"|"--bitchute")
            VIDS_PLTFRM="bitchute"  ; shift ;;
        "-ted"|"--ted"|"--tedtalk")
            VIDS_PLTFRM="tedtalk"   ; shift ;;
        "-lb"|"--lb"|"--lbry"|"--odysee")
            VIDS_PLTFRM="lbry"      ; shift ;;

        "--piped")
            VIDS_YOUTUBE_PIPED=true ; shift ;;
        "--no-piped")
            VIDS_YOUTUBE_PIPED=false; shift ;;

        "--nsfw")
            VIDS_SHOW_NSFW=true     ; shift ;;
        "--no-nsfw")
            VIDS_SHOW_NSFW=false    ; shift ;;

        "-m"|"--menu")
            if [ $# -lt 2 ]; then
                _pemx "$1 option requires 1 argument"
            fi
            case "$2" in
                fzf|dmenu|rofi) VIDS_MENU="$2"; shift 2 ;;
                *) _pemx "'$2' is not supported as a menu, use instead : fzf , dmenu , rofi." ;;
            esac
            ;;
        "--fzf"|"--dmenu"|"--rofi"|"--print"|"--print-json"|"--print-link")
            VIDS_MENU="${1#??}"     ; shift ;;

        "-P"|"--player")
            if [ $# -lt 2 ]; then
                _pemx "$1 option requires 1 argument"
            fi
            VIDS_PLAYER="${2}" ; shift 2 ;;
        "-a"|"--player-args")
            if [ $# -lt 2 ]; then
                _pemx "$1 option requires 1 argument"
            fi
            VIDS_PLAYER_ARGS="${2}" ; shift 2 ;;

        "-e"|"--exit")
            VIDS_ONE_SHOT=true ; shift ;;

        "--")
            shift ; break ;;
        "-"*)
            _pemx "$1 in not a supported option" ;;
        *)  break ;;
    esac
done

case "${VIDS_PLTFRM}" in
    "ytrending")
            if [ "${VIDS_YOUTUBE_PIPED}" = true ]; then
                VIDSBRND="Youtube Trending (Piped)"
                VIDSMTHD="GET"
                VIDSPRMT="-G --data-urlencode"
                VIDSURL="${VIDS_PIPEDAPI_URL}/trending"
                query="US"
                VIDSPRMT1="region"
                VIDSPRMT2=""
                VIDSHDR1=""
                VIDSHDR2=""
                VIDSJSN1=""
                VIDSJSN2='[ .[] |{ title: .title, channel: .uploaderName, duration:"\(if .duration <= 3600 then "\(.duration|strftime("%M:%S"))" else "\(.duration|strftime("%H:%M:%S"))" end)", views: "\(.views) views", date: .uploadedDate, videoURL: "https://youtu.be/\(.url[9:])", }]'
            else
                VIDSBRND="Youtube Trending"
                VIDSMTHD="GET"
                VIDSPRMT="-G --data-urlencode"
                VIDSURL="https://www.youtube.com/feed/trending"
                query="US"
                VIDSPRMT1="gl"
                VIDSPRMT2="pbj=1"
                VIDSHDR1="x-youtube-client-name:1"
                VIDSHDR2="x-youtube-client-version:2.20200214.04.00"
                VIDSJSN1=".[1].response"
                VIDSJSN2='[ .contents|..|.videoRenderer? | select(. !=null) | { title: .title.runs[0].text, channel: .longBylineText.runs[0].text, duration:.lengthText.simpleText, views: .shortViewCountText.simpleText, date: .publishedTimeText.simpleText, videoURL: "https://youtu.be/\(.videoId)", }]'
            fi
             ;;
    "youtube")
            if [ "${VIDS_YOUTUBE_PIPED}" = true ]; then
                VIDSBRND="Youtube (Piped)"
                VIDSMTHD="GET"
                VIDSPRMT="-G --data-urlencode"
                VIDSURL="${VIDS_PIPEDAPI_URL}/search"
                VIDSPRMT1="q"
                VIDSPRMT2="filter=videos"
                VIDSHDR1=""
                VIDSHDR2=""
                VIDSJSN1=".items"
                VIDSJSN2='[ .[] |{ title: .name , channel: .uploader ,duration:"\(if .duration == -1 then "Livestream" elif .duration <= 3600 then "\(.duration|strftime("%M:%S"))" else "\(.duration|strftime("%H:%M:%S"))" end)", views: "\(.views) views" , date: "\(.uploadDate // "Right now")", videoURL: "https://youtu.be/\(.url[9:])", }]'
                case "$1" in
                    *"/channel/"*|*"/c/"*|*"/user/"*)
                        [ $# -eq 1 ] ||  _pemx "piped doesn't supports search in channels"
                        VIDSBRND="Youtube Channel (Piped)"
                        VIDSURL="${VIDS_PIPEDAPI_URL}/$(printf '%s\n' "$1" | awk '{split($0,a,"/"); print a[4]"/"a[5] }')"
                        VIDSJSN1=".relatedStreams"
                        VIDSJSN2='[ .[] |{ title: .title, channel: .uploaderName, duration:"\(if .duration <= 3600 then "\(.duration|strftime("%M:%S"))" else "\(.duration|strftime("%H:%M:%S"))" end)", views: "\(.views) views", date: "\(.uploadedDate // " - ")", videoURL: "https://youtu.be/\(.url[9:])", }]'
                        VIDSPRMT1="region"
                        VIDSPRMT2=""
                        query="-"
                        shift
                        ;;
                    *"/playlist?list="*)
                        [ $# -eq 1 ] ||  _pemx "piped doesn't supports search in playlist"
                        VIDSBRND="Youtube Playlist (Piped)"
                        VIDSURL="${VIDS_PIPEDAPI_URL}/$(printf '%s\n' "$1" | awk '{split($0,a,"="); print "playlists/"a[2] }')"
                        VIDSJSN1=".relatedStreams"
                        VIDSJSN2='[ .[] |{ title: .title, channel: .uploaderName, duration:"\(if .duration <= 3600 then "\(.duration|strftime("%M:%S"))" else "\(.duration|strftime("%H:%M:%S"))" end)", views: "\(.views) views", date: "\(.uploadedDate // " - ")", videoURL: "https://youtu.be/\(.url[9:])", }]'
                        VIDSPRMT1="region"
                        VIDSPRMT2=""
                        query="-"
                        shift
                        ;;
                esac
            else
                VIDSBRND="Youtube"
                VIDSMTHD="GET"
                VIDSPRMT="-G --data-urlencode"
                VIDSURL="https://www.youtube.com/results?sp=EgIQAQ%253D%253D"
                VIDSPRMT1="search_query"
                VIDSPRMT2="pbj=1"
                VIDSHDR1="x-youtube-client-name:1"
                VIDSHDR2="x-youtube-client-version:2.20200214.04.00"
                VIDSJSN1=".[1].response"
                VIDSJSN2='[ .contents|..|.videoRenderer? | select(. !=null) | { title: .title.runs[0].text, channel: .longBylineText.runs[0].text, duration:"\(.lengthText.simpleText // "Livestream")", views: "\(.shortViewCountText.simpleText // "\(.shortViewCountText.runs[0].text) watching")", date: "\(.publishedTimeText.simpleText // "Right now")", videoURL: "https://youtu.be/\(.videoId)", }]'
                case "$1" in
                    *"/channel/"*|*"/c/"*|*"/user/"*)
                        if [ $# -eq 1 ] ;then
                            VIDSBRND="Youtube Channel"
                            VIDSURL="https://www.youtube.com/$(printf '%s\n' "$1" | awk '{split($0,a,"/"); print a[4]"/"a[5] }')/videos"
                            query="-"
                            VIDSPRMT1="gl"
                            VIDSJSN2='[ .contents|..|.gridVideoRenderer? | select(. !=null) | { title: .title.runs[0].text, channel: "@", duration:"\(.thumbnailOverlays[0].thumbnailOverlayTimeStatusRenderer.text.simpleText)", views: "\(.shortViewCountText.simpleText // "\(.shortViewCountText.runs[0].text) watching")", date: "\(.publishedTimeText.simpleText // "Right now")", videoURL: "https://youtu.be/\(.videoId)", }]'
                            shift
                        else
                            VIDSBRND="Youtube Channel Search"
                            VIDSPRMT1="query"
                            VIDSURL="https://www.youtube.com/$(printf '%s\n' "$1" | awk '{split($0,a,"/"); print a[4]"/"a[5] }')/search"
                            VIDSJSN2='[ .contents|..|.videoRenderer? | select(. !=null) | { title: .title.runs[0].text, channel: .shortBylineText.runs[0].text, duration:"\(.thumbnailOverlays[0].thumbnailOverlayTimeStatusRenderer.text.simpleText)", views: "\(.shortViewCountText.simpleText // "\(.shortViewCountText.runs[0].text) watching")", date: "\(.publishedTimeText.simpleText // "Right now")", videoURL: "https://youtu.be/\(.videoId)", }]'
                            shift
                        fi
                        ;;
                    *"/playlist?list="*)
                        [ $# -eq 1 ] ||  _pemx "youtube doesn't supports search in playlist"
                        VIDSBRND="Youtube Playlist"
                        VIDSURL="https://www.youtube.com/playlist?list=$(printf '%s\n' "$1" | awk '{split($0,a,"="); print a[2] }')"
                        query="-"
                        VIDSPRMT1="gl"
                        VIDSJSN2='[ .contents|..|.playlistVideoRenderer? | select(. !=null) | { title: .title.runs[0].text, channel: .shortBylineText.runs[0].text, duration:"\(.thumbnailOverlays[0].thumbnailOverlayTimeStatusRenderer.text.simpleText)", views: "-", date: "-", videoURL: "https://youtu.be/\(.videoId)", }]'
                        shift
                        ;;
                esac
            fi
             ;;
    "peertube")
            VIDSBRND="PeerTube"
            VIDSMTHD="GET"
            VIDSPRMT="-G --data-urlencode"
            VIDSURL="${VIDS_PEERTUBE_URL}/api/v1/search/videos"
            VIDSPRMT1="search"
            VIDSPRMT2="count=40"
            VIDSHDR1=""
            VIDSHDR2=""
            VIDSJSN1=".data"
            VIDSJSN2='[ .[] |{ title: .name, channel: .channel.displayName,duration:"\(if .duration == 0 then "Livestream" elif .duration <= 3600 then "\(.duration|strftime("%M:%S"))" else "\(.duration|strftime("%H:%M:%S"))" end)", views: "\(.views) views", date: .publishedAt| sub("(?<time>.*)\\.[\\d]{3}(?<tz>.*)"; "\(.time)\(.tz)")|strptime("%Y-%m-%dT%H:%M:%SZ")|strftime("%Y-%m-%d"), videoURL: .url, }]'
             ;;
    "bitchute")
            BTCTCSRF="zyG6tQcGPE5swyAEFLqKUwMuMMuF6IO2DZ6ZDQjGfsL0e4dcTLwqkTTul05Jdve7"
            VIDSBRND="BitChute"
            VIDSMTHD="POST"
            VIDSPRMT="-d"
            VIDSURL="https://www.bitchute.com/api/search/list/"
            VIDSPRMT1="query"
            VIDSPRMT2="csrfmiddlewaretoken=${BTCTCSRF}"
            VIDSHDR1="cookie: csrftoken=${BTCTCSRF};"
            VIDSHDR2="referer: https://www.bitchute.com/"
            VIDSJSN1=".results"
            VIDSJSN2='[ .[] |{ title: .name, channel: .channel_name, duration: .duration, views: "\(.views) views", date: .published, videoURL: "https://www.bitchute.com\(.path)", }]'
             ;;
    "tedtalk")
            VIDSBRND="TED Talks"
            VIDSMTHD="GET"
            VIDSPRMT="-G --data-urlencode"
            VIDSURL="https://ted2srt.org/api/search"
            VIDSPRMT1="q"
            VIDSPRMT2=""
            VIDSHDR1=""
            VIDSHDR2=""
            VIDSJSN1=""
            VIDSJSN2='[ .[] |{ title: .name, channel: "TED", duration: .duration, views: .views, date: .publishedAt, videoURL: "https://ted.com/talks/\(.slug)", }]'
             ;;
    "lbry")
            VIDSBRND="LBRY"
            VIDSMTHD="GET"
            VIDSPRMT="-G --data-urlencode"
            VIDSURL="https://lighthouse.lbry.com/search?size=80&from=0&claimType=file&mediaType=video&include=view_cnt"
            [ "${VIDS_SHOW_NSFW}" = true ] && VIDSURL="${VIDSURL}&nsfw=true"
            VIDSPRMT1="s"
            VIDSPRMT2="resolve=true"
            VIDSHDR1=""
            VIDSHDR2=""
            VIDSJSN1=""
            VIDSJSN2='[ .[] |{ title: .title, channel: .channel ,duration:"\(if .duration <= 3600 then "\(.duration|strftime("%M:%S"))" else "\(.duration|strftime("%H:%M:%S"))" end)", views: "\(.view_cnt) views", date: .release_time|strptime("%Y-%m-%dT%H:%M:%SZ")|strftime("%Y-%m-%d"), videoURL: "https://www.odysee.com/\(.channel)/\(.name)", }]'
             ;;
esac

printf '%s' "${VIDSBRND} - Search query: "

if [ -z "$query" ] || [ -n "$1" ]; then
    if [ -z "$1" ]; then
        query="$(_input)"
    else
        query="$*"
    fi
fi

# If no query was passed, exit
[ -z "${query}" ] && exit 0

echo "${query}"

# shellcheck disable=SC2086
vids_jsondata=$(curl -X ${VIDSMTHD} "${VIDSURL}" -s \
    ${VIDSPRMT} "${VIDSPRMT1}=${query}" \
    ${VIDSPRMT} "${VIDSPRMT2}" \
    -H "${VIDSHDR1}" -H "${VIDSHDR2}" \
    -H "user-agent:Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0" \
    -H "accept-language:en-US, en;q=0.9" \
    -H "accept-encoding:gzip" --compressed \
)

vids_jsonvdata=$(printf '%s' "${vids_jsondata}" | jq -r "${VIDSJSN1}" | jq -r "${VIDSJSN2}")

vids_listvdata=$(printf '%s' "${vids_jsonvdata}" \
                | jq -r '.[]| "\(.channel) \t \(.title) \t \(.duration) \t \(.date) \t \(.videoURL)"' \
                | gawk -v max="${COLUMNS:-80}" 'BEGIN { RS="\n"; FS=" \t " }
                  {
                    channel = substr(gensub(/\s+> (.*)/, "\\1", "g", $1),0)
                    title = substr(gensub(/\s+> (.*)/, "\\1", "g", $2),0)
                    duration = substr(gensub(/\s+> (.*)/, "\\1", "g", $3),0)
                    date = substr(gensub(/\s+> (.*)/, "\\1", "g", $4),0)
                    videoURL = substr(gensub(/\s+> (.*)/, "\\1", "g", $5),0)
                    print channel "\t| " title "\t| " duration "\t| " date "\t" videoURL
                  }' | column -t -s $'\t' \
                )

while :; do
    _choose

    # If no video was chosen, exit
    [ -z "${video_url}" ] && exit 0

    # shellcheck disable=SC2086
    ${VIDS_PLAYER:?} ${VIDS_PLAYER_ARGS:-} ${video_url}

    [ "${VIDS_ONE_SHOT}" = true ] && exit 0
done
