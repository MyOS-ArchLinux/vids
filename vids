#!/usr/bin/env sh
VIDS_YOUTUBE_PIPED=${VIDS_YOUTUBE_PIPED:-false}   # use youtube alternative front-end Piped
VIDS_PIPEDAPI_URL="${VIDS_PIPEDAPI_URL:-https://pipedapi.kavin.rocks}" # https://github.com/TeamPiped/Piped/wiki/Instances

# check if app installed ; ignores aliases
has() {
    case "$(command -v "$1" 2>/dev/null)" in
        alias*|"") return 1
    esac
}

phi() {
    >&2 printf '    %s , %s , %s     %s\n' "$1" "$2" "$3" "$4"
}

pht() {
    >&2 printf '%s\n' "$@"
}

if has 'rofi' ; then
    vids_menu="rofi"
elif has 'dmenu'; then
    vids_menu="dmenu"
else
    vids_menu="fzf"
fi

_input(){
    case "$vids_menu" in
        "dmenu") printf '' | dmenu -p "Search ${VIDSBRND} Video:" ;;
        "rofi")  printf '' | rofi -dmenu -p "Search ${VIDSBRND} Video" -l 0 ;;
        "fzf")   read -r query && echo "${query}" ;;
    esac
}

_choose(){
    case "$vids_menu" in
        "dmenu") dmenu -i -p 'Select Video:' -l 20 ;;
        "rofi")  rofi -dmenu -i -p 'Select Video' -width 90 -l 20 -multi-select -no-click-to-exit ;;
        "fzf")   fzf --with-nth='1..-3' --multi --cycle --header='Select Video:' ;;
    esac
}

usage() {
    pht "Usage:   vids --option query"
    pht
    pht "Options:"

    phi -tr "--ytr " "--ytrending " "Get List Youtube Trending"
    phi -yt "--ytb " "--youtube   " "Search Youtube"
    phi -pt "--prtb" "--peertube  " "Search PeerTube"
    phi -bc "--btct" "--bitchute  " "Search BitChute"
    phi -td "--ted " "--tedtalk   " "Search TED Talks"
    phi -lb "--lbry" "--odysee    " "Search LBRY"
}

case "$1" in
    "-dmenu"|"--dmenu") vids_menu="dmenu"; shift;;
    "-rofi"|"--rofi")   vids_menu="rofi" ; shift;;
    "-fzf"|"--fzf")     vids_menu="fzf"  ; shift;;
esac

# Set Default
pltfrm="youtube"
case "$1" in
    -tr|--ytr|--ytrending)
            pltfrm="ytrending"; shift;;
    -yt|--ytb|--youtube)
            pltfrm="youtube"  ; shift;;
    -pt|--prtb|--peertube)
            pltfrm="peertube" ; shift;;
    -bc|--btct|--bitchute)
            pltfrm="bitchute" ; shift;;
    -td|--ted|--tedtalk)
            pltfrm="tedtalk"  ; shift;;
    -lb|-lbr|--lbry|--odysee)
            pltfrm="lbry"  ; shift;;
    -h |--help|--*|-*)
            usage; exit 0 ;;
esac

case "${pltfrm}" in
    "ytrending")
            if [ "${VIDS_YOUTUBE_PIPED}" = true ]; then
                VIDSBRND="Youtube Trending (Piped)"
                VIDSMTHD="GET"
                VIDSPRMT="-G --data-urlencode"
                VIDSURL="${VIDS_PIPEDAPI_URL}/trending"
                query="US"
                VIDSPRMT1="region"
                VIDSPRMT2=""
                VIDSHDR1=""
                VIDSHDR2=""
                VIDSJSN1=""
                VIDSJSN2='[ .[] |{ title: .title, channel: .uploaderName, duration:"\(if .duration <= 3600 then "\(.duration|strftime("%M:%S"))" else "\(.duration|strftime("%H:%M:%S"))" end)", views: "\(.views) views", date: .uploadedDate, videoURL: "https://youtube.com/\(.url[9:])", }]'
            else
                VIDSBRND="Youtube Trending"
                VIDSMTHD="GET"
                VIDSPRMT="-G --data-urlencode"
                VIDSURL="https://www.youtube.com/feed/trending"
                query="US"
                VIDSPRMT1="gl"
                VIDSPRMT2="pbj=1"
                VIDSHDR1="x-youtube-client-name:1"
                VIDSHDR2="x-youtube-client-version:2.20200214.04.00"
                VIDSJSN1=".[1].response"
                VIDSJSN2='[ .contents|..|.videoRenderer? | select(. !=null) | { title: .title.runs[0].text, channel: .longBylineText.runs[0].text, duration:.lengthText.simpleText, views: .shortViewCountText.simpleText, date: .publishedTimeText.simpleText, videoURL: "https://youtu.be/\(.videoId)", }]'
            fi
             ;;
    "youtube")
            if [ "${VIDS_YOUTUBE_PIPED}" = true ]; then
                VIDSBRND="Youtube (Piped)"
                VIDSMTHD="GET"
                VIDSPRMT="-G --data-urlencode"
                VIDSURL="${VIDS_PIPEDAPI_URL}/search"
                VIDSPRMT1="q"
                VIDSPRMT2="filter=videos"
                VIDSHDR1=""
                VIDSHDR2=""
                VIDSJSN1=".items"
                VIDSJSN2='[ .[] |{ title: .name , channel: .uploader ,duration:"\(if .duration == -1 then "Livestream" elif .duration <= 3600 then "\(.duration|strftime("%M:%S"))" else "\(.duration|strftime("%H:%M:%S"))" end)", views: "\(.views) views" , date: "\(.uploadDate // "Right now")", videoURL: "https://youtu.be/\(.url[9:])", }]'
            else
                VIDSBRND="Youtube"
                VIDSMTHD="GET"
                VIDSPRMT="-G --data-urlencode"
                VIDSURL="https://www.youtube.com/results"
                VIDSPRMT1="search_query"
                VIDSPRMT2="pbj=1"
                VIDSHDR1="x-youtube-client-name:1"
                VIDSHDR2="x-youtube-client-version:2.20200214.04.00"
                VIDSJSN1=".[1].response"
                VIDSJSN2='[ .contents|..|.videoRenderer? | select(. !=null) | { title: .title.runs[0].text, channel: .longBylineText.runs[0].text, duration:"\(.lengthText.simpleText // "Livestream")", views: "\(.shortViewCountText.simpleText // "\(.shortViewCountText.runs[0].text) watching")", date: "\(.publishedTimeText.simpleText // "Right now")", videoURL: "https://youtu.be/\(.videoId)", }]'
            fi
             ;;
    "peertube")
            VIDSBRND="PeerTube"
            VIDSMTHD="GET"
            VIDSPRMT="-G --data-urlencode"
            VIDSURL="https://sepiasearch.org/api/v1/search/videos"
            VIDSPRMT1="search"
            VIDSPRMT2="count=20"
            VIDSHDR1=""
            VIDSHDR2=""
            VIDSJSN1=".data"
            VIDSJSN2='[ .[] |{ title: .name, channel: .channel.displayName,duration: .duration, views: .views, date: .publishedAt, videoURL: .url, }]'
             ;;
    "bitchute")
            BTCTCOKY="zyG6tQcGPE5swyAEFLqKUwMuMMuF6IO2DZ6ZDQjGfsL0e4dcTLwqkTTul05Jdve7" 
            VIDSBRND="BitChute"
            VIDSMTHD="POST"
            VIDSPRMT="-d"
            VIDSURL="https://www.bitchute.com/api/search/list/"
            VIDSPRMT1="query"
            VIDSPRMT2="csrfmiddlewaretoken=${BTCTCOKY}"
            VIDSHDR1="cookie: csrftoken=${BTCTCOKY};"
            VIDSHDR2="referer: https://www.bitchute.com/"
            VIDSJSN1=".results"
            VIDSJSN2='[ .[] |{ title: .name, channel: .channel_name, duration: .duration, views: .views, date: .published, videoURL: "https://www.bitchute.com\(.path)", }]'
             ;;
    "tedtalk")
            VIDSBRND="TED Talks"
            VIDSMTHD="GET"
            VIDSPRMT="-G --data-urlencode"
            VIDSURL="https://ted2srt.org/api/search"
            VIDSPRMT1="q"
            VIDSPRMT2=""
            VIDSHDR1=""
            VIDSHDR2=""
            VIDSJSN1=""
            VIDSJSN2='[ .[] |{ title: .name, channel: "TED", duration: .duration, views: .views, date: .publishedAt, videoURL: "https://ted.com/talks/\(.slug)", }]'
             ;;
    "lbry")
            VIDSBRND="LBRY"
            VIDSMTHD="GET"
            VIDSPRMT="-G --data-urlencode"
            VIDSURL="https://lighthouse.lbry.com/search?size=80&from=0&claimType=file&mediaType=video"
            VIDSPRMT1="s"
            VIDSPRMT2="resolve=true"
            VIDSHDR1=""
            VIDSHDR2=""
            VIDSJSN1=""
            VIDSJSN2='[ .[] |{ title: .title, channel: .channel ,duration: .duration, views: "0", date: .release_time, videoURL: "https://www.odysee.com/\(.channel)/\(.name)", }]'
             ;;
esac

printf '%s' "${VIDSBRND} - Search query: "

if [ -z "$query" ] || [ -n "$1" ]; then
    if [ -z "$1" ]; then
        query="$(_input)"
    else
        query="$*"
    fi
fi

# If no query was passed, exit
[ -z "${query}" ] && exit 0

echo "${query}"

# shellcheck disable=SC2086
vids_jsondata=$(curl -X ${VIDSMTHD} "${VIDSURL}" -s \
    ${VIDSPRMT} "${VIDSPRMT1}=${query}" \
    ${VIDSPRMT} "${VIDSPRMT2}" \
    -H "${VIDSHDR1}" -H "${VIDSHDR2}" \
    -H "user-agent:Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0" \
    -H "accept-language:en-US, en;q=0.9" \
    -H "accept-encoding:gzip" --compressed \
)

vids_jsonvdata=$(printf '%s' "${vids_jsondata}" | jq -r "${VIDSJSN1}" | jq -r "${VIDSJSN2}")

while :; do
    video_url=$(printf '%s' "${vids_jsonvdata}" \
        | jq -r '.[]| "[\(.channel)] -- \(.title) -- [\(.duration)] -- \(.date) -- \(.videoURL)"' \
        | _choose \
        | awk '{print $NF}' \
    )

    # If no video was chosen, exit
    [ -z "${video_url}" ] && exit 0

    # shellcheck disable=SC2086
    printf '%s\n' ${video_url} | mpv --playlist=-
done
